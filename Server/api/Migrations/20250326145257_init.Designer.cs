// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Identity;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250326145257_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IdentityCafeteriaModel.V_Menu", b =>
                {
                    b.Property<int>("menuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("menuID"));

                    b.Property<string>("menuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("menuParent")
                        .HasColumnType("int");

                    b.HasKey("menuID");

                    b.ToTable("VMenus");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_Permission_RoleMenu", b =>
                {
                    b.Property<int>("rolemenuID")
                        .HasColumnType("int");

                    b.Property<int>("permissionID")
                        .HasColumnType("int");

                    b.Property<string>("permissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("rolemenuID", "permissionID");

                    b.ToTable("VPermission_Roles");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_Role", b =>
                {
                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserCount")
                        .HasColumnType("int");

                    b.HasKey("RoleID");

                    b.ToTable("RoleModels");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_Role_Menu", b =>
                {
                    b.Property<int>("menuID")
                        .HasColumnType("int");

                    b.Property<int>("rolemenuID")
                        .HasColumnType("int");

                    b.Property<int>("permissionID")
                        .HasColumnType("int");

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("menuID", "rolemenuID", "permissionID");

                    b.ToTable("VRole_Menus");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_TakePermission_From_UserAndApiAndRole", b =>
                {
                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("API")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Permission");

                    b.ToTable("V_TakePermission");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_TakeRole_From_UserAndApi", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("API")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleName");

                    b.ToTable("V_TakeRole");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("V_Users");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_UserId_RoleId", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("V_UserId_RoleIds");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_AccountantTeam", b =>
                {
                    b.Property<string>("TeamID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamLeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamID");

                    b.ToTable("LKACSoft_AccountantTeam");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_Customer", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToCustomerSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Dissolved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DissolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilterLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GetDocsDate")
                        .HasColumnType("int");

                    b.Property<string>("LKACSoft_DepartmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoS3Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleAccountantTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Suspended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SuspendedTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("LKACSoft_Customer");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_Department", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Closed")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("LKACSoft_Department");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_DocumentLendingHistory", b =>
                {
                    b.Property<string>("DocumentLendID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LendDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LendExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("LendStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentLendID");

                    b.ToTable("LKACSoft_DocumentLendingHistory");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_DocumentType", b =>
                {
                    b.Property<string>("DocumentTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AvgAmount")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReceivingMechanism")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedToCustomer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentTypeID");

                    b.ToTable("LKACSoft_DocumentType");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_Feedback", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime?>("DateFeedback")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FromCustomer")
                        .HasColumnType("bit");

                    b.Property<int?>("FromWhoCode")
                        .HasColumnType("int");

                    b.Property<string>("ProcessID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ToCustomer")
                        .HasColumnType("bit");

                    b.Property<int?>("ToWhomCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("LKACSoft_Feedback");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_JobTaskFile", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountantID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountantReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AccountingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ArchivingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileS3Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadyToBeReturnedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RelatedToProcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("LKACSoft_JobTaskFile");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_LendDocument", b =>
                {
                    b.Property<string>("DocumentLendID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocumentLendID", "FileCode");

                    b.ToTable("LKACSoft_LendDocument");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_Position", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("LKACSoft_Position");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_Priority", b =>
                {
                    b.Property<string>("PriorityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DesignatedColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityID");

                    b.ToTable("LKACSoft_Priority");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_Process", b =>
                {
                    b.Property<string>("ProcessID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GetDocsDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPeriodicProcess")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedToCustomer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcessID");

                    b.ToTable("LKACSoft_Process");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_ProcessStatus", b =>
                {
                    b.Property<string>("ProcessStatusID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcessStatusID");

                    b.ToTable("LKACSoft_ProcessStatus");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_RequestToCustomerSupport", b =>
                {
                    b.Property<string>("RequestID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerSupportComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerSupportID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVerified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFromCustomer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFromStaff")
                        .HasColumnType("bit");

                    b.Property<string>("StaffID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestID");

                    b.ToTable("LKACSoft_RequestToCustomerSupport");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_Task", b =>
                {
                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReview")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DesignatedNumberOfDocument")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRetried")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfCompletedDocument")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedToProcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TaskDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskStatusID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.ToTable("LKACSoft_Task");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_TaskComment", b =>
                {
                    b.Property<string>("CommentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentID");

                    b.ToTable("LKACSoft_TaskComment");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_TaskStatus", b =>
                {
                    b.Property<string>("TaskStatusID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DesignatedColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskStatusID");

                    b.ToTable("LKACSoft_TaskStatus");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_TaskType", b =>
                {
                    b.Property<string>("TaskTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredProcessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskTypeID");

                    b.ToTable("LKACSoft_TaskType");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_TaskTypeResponsiblePosition", b =>
                {
                    b.Property<string>("TaskStatusID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PositionCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TaskStatusID", "TaskTypeID", "PositionCode");

                    b.ToTable("LKACSoft_TaskTypeResponsiblePosition");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_TaskTypeStatus", b =>
                {
                    b.Property<string>("TaskStatusID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssociatedProcessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskStatusID", "TaskTypeID");

                    b.ToTable("LKACSoft_TaskTypeStatus");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsQuitJob")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LKACSoft_User");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_UserPosition", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LKACSoft_PositionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LKACSoft_DepartmentCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LKACSoft_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID", "LKACSoft_PositionCode", "LKACSoft_DepartmentCode");

                    b.HasIndex("LKACSoft_PositionCode");

                    b.HasIndex("LKACSoft_UserID");

                    b.ToTable("LKACSoft_UserPosition");
                });

            modelBuilder.Entity("LKACSoftModel.V_DetailCustomers", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedSupportAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedSupportAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssignedSupportDateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedSupportDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssignedSupportDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedSupportFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedSupportID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AssignedSupportIsQuitJob")
                        .HasColumnType("bit");

                    b.Property<string>("AssignedSupportLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedSupportTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedSupportTeamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedSupportUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToCustomerSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedByDateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedByDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CreatedByIsQuitJob")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedByLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByTeamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DepartmentClosed")
                        .HasColumnType("bit");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentDisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Dissolved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DissolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilterLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GetDocsDate")
                        .HasColumnType("int");

                    b.Property<string>("LKACSoft_DepartmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoS3Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountantAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountantAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MainAccountantDateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainAccountantDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MainAccountantDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainAccountantFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountantID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MainAccountantIsQuitJob")
                        .HasColumnType("bit");

                    b.Property<string>("MainAccountantLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountantTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountantTeamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAccountantUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleAccountantTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Suspended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SuspendedTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("V_DetailCustomers");
                });

            modelBuilder.Entity("LKACSoftModel.V_DetailTasks", b =>
                {
                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssignedUserDateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedUserDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssignedUserDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedUserFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AssignedUserIsQuitJob")
                        .HasColumnType("bit");

                    b.Property<string>("AssignedUserLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserTeamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedUserUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReview")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignatedNumberOfDocument")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GetDocsDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPeriodicProcess")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRetried")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfCompletedDocument")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityDesignatedColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedToCustomer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedToProcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredProcessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedUserAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedUserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedUserDateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewedUserDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedUserDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewedUserFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedUserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReviewedUserIsQuitJob")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewedUserLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedUserTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedUserTeamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedUserUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TaskCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TaskDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatusDesignatedColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatusID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTypeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.ToTable("V_DetailTasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Identity.APIPermission", b =>
                {
                    b.Property<int>("RoleApiId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("RoleApiId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ApiPermission", (string)null);
                });

            modelBuilder.Entity("api.Identity.ApplicationAPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("API")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetAPI", (string)null);
                });

            modelBuilder.Entity("api.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleAPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleAPI");
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleMenu");
                });

            modelBuilder.Entity("api.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Identity.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AspNetMenu", (string)null);
                });

            modelBuilder.Entity("api.Identity.MenuPermission", b =>
                {
                    b.Property<int>("RoleMenuId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("RoleMenuId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission", (string)null);
                });

            modelBuilder.Entity("api.Identity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("api.Models.RoleMenuPermAll", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("PermId")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserCount")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "MenuId", "PermId");

                    b.ToTable("rolemenupermAll");
                });

            modelBuilder.Entity("api.Models.UserRolesModel", b =>
                {
                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Role");

                    b.ToTable("userRolesModels");
                });

            modelBuilder.Entity("LKACSoftModel.LKACSoft_UserPosition", b =>
                {
                    b.HasOne("LKACSoftModel.LKACSoft_Position", "LKACSoft_Position")
                        .WithMany()
                        .HasForeignKey("LKACSoft_PositionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LKACSoftModel.LKACSoft_User", "LKACSoft_User")
                        .WithMany()
                        .HasForeignKey("LKACSoft_UserID");

                    b.Navigation("LKACSoft_Position");

                    b.Navigation("LKACSoft_User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Identity.APIPermission", b =>
                {
                    b.HasOne("api.Identity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationRoleAPI", "RoleApi")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("RoleApi");
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleAPI", b =>
                {
                    b.HasOne("api.Identity.ApplicationAPI", "API")
                        .WithMany("RoleApis")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("API");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleMenu", b =>
                {
                    b.HasOne("api.Identity.MenuItem", "MenuItem")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Identity.MenuItem", b =>
                {
                    b.HasOne("api.Identity.MenuItem", "ParentItem")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("api.Identity.MenuPermission", b =>
                {
                    b.HasOne("api.Identity.Permission", "Permission")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationRoleMenu", "RoleMenu")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("RoleMenu");
                });

            modelBuilder.Entity("api.Identity.ApplicationAPI", b =>
                {
                    b.Navigation("RoleApis");
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleAPI", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleMenu", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("api.Identity.MenuItem", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("api.Identity.Permission", b =>
                {
                    b.Navigation("MenuPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
